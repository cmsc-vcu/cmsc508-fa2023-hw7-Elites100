---
title: Homework 7 - Creating a resume database
author: Kevin Phung
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document would contain python code that would access the database server of mysql (phpMyAdmin) on the 23FA_users_phungk2 and perform the nessary query statements being asked in each of the following questions from the tables of people, peopleroles, peopleskills, roles, and skills  

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Elites100.git>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project would access the database server of mysql (phpMyAdmin) on the 23FA_users_phungk2 as the database would contain tables of people, peopleroles, peopleskills, roles, and skills 

## Crows-foot diagram

The diagram shows relationships between entities in a simple relational database model. Specifically, the diagram depicts the relationships between a CUSTOMER, ORDER, and DELIVERY-ADDRESS
<br>
A CUSTOMER can place multiple ORDERs.
A CUSTOMER can use multiple DELIVERY-ADDRESSes, and each DELIVERY-ADDRESS can be associated with multiple CUSTOMERs.

```{mermaid}
erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses

    CUSTOMER{
        int id
        string first_name
        string last_name
    }
    DELIVERY-ADDRESS{
        int id
    }
```




## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 
The persons ID, The person Last name, The person email address, a person Linkedin, a headshot url, discord handle, a breif, bio and the date joined. The contents for each of the columns are filled in with different descriptions

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 
The skills ID, The skills name, a description of the skills, a skill tag, a skills url, and the time committed for the skills. The content for each of the columns are filled in with different descriptions except skills url and time committed, which are set to defult NULL

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 
The role ID, the roles name, and the priority of that role. The content for each of the columns are filled differently assign each given name to a exact value of priority.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people_first_name, people_last_name, people_email 
FROM people 
ORDER BY CAST(SUBSTRING(people_last_name, 8) AS UNSIGNED);
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.skills_name
FROM peopleskills
JOIN skills ON peopleskills.skills_id = skills.skills_id
JOIN people ON peopleskills.people_id = people.people_id
WHERE people.people_id = 1;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_first_name, people.people_last_name
FROM peopleskills
JOIN skills ON peopleskills.skills_id = skills.skills_id
JOIN people ON peopleskills.people_id = people.people_id
WHERE skills.skills_id=6;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.*
FROM peopleroles
JOIN roles ON peopleroles.roles_id = roles.roles_id
JOIN people ON peopleroles.people_id = people.people_id
WHERE roles.roles_name='Developer';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people_first_name, people_last_name, people_email
FROM people
LEFT JOIN peopleskills ON people.people_id = peopleskills.people_id
WHERE peopleskills.people_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills_name, skills_tag
FROM skills
LEFT JOIN peopleskills ON skills.skills_id = peopleskills.skills_id
WHERE peopleskills.skills_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_first_name, people.people_last_name, skills.skills_name
FROM peopleroles
JOIN roles ON peopleroles.roles_id = roles.roles_id
JOIN people ON peopleroles.people_id = people.people_id
LEFT JOIN peopleskills ON people.people_id = peopleskills.people_id
LEFT JOIN skills ON peopleskills.skills_id = skills.skills_id
WHERE roles.roles_name = 'Boss';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT roles.roles_id, roles.roles_name
FROM roles
LEFT JOIN peopleroles ON roles.roles_id = peopleroles.roles_id
WHERE peopleroles.roles_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I thought that this assignment was pretty confusing at first since I wasn't sure what hw7-ddl.sql supposed to be for or what I was meant to do on it after reading the intructions/rubric on canvas. The only thing I could do was figure out the errors such as adding/changing the information in .env file, connect to the SQL database, and answer some hw7.qmd question not involving the newly created tables/database (people/roles/skills). After the insturctor walkthrough on hw7 with providing some examples and setups, It made more sense understanding the hw7-ddl.sql and also the errors occuring for code searching for a database (people/skill/etc table did not exists at the time). The query statements for hw7-ddl.sql to creating tables and inserting data into the table were straightforward, which are very similar to the examples done it class throughout all the tables; However, the junction tables (peopleroles and peopleskills) took a little time to figure out how to make those ID (people/skills/roles ID) become foreign keys from the primary key of their tables. The last couple of query statements in hw7.qmd took a while for me to search up to understand how to use joins and to correct query errors. Overall, The assignment was straightword and clear after the walkthrough demo in class and I gained experience on writing querys and looking at code to write query in python/qmd form   
